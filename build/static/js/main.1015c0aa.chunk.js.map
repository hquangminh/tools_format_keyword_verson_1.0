{"version":3,"sources":["FileUpload.js","SearchFilter.js","DataTable.js","App.js","reportWebVitals.js","index.js"],"names":["FileUpload","_ref","setData","error","setError","useState","fileName","setFileName","React","createElement","type","onChange","event","file","target","files","reader","FileReader","onload","e","data","Uint8Array","result","workbook","XLSX","firstSheet","Sheets","SheetNames","jsonData","sheet_to_json","name","err","readAsArrayBuffer","accept","style","color","SearchFilter","includeKeywords","handleIncludeKeywordsChange","excludeKeywords","handleExcludeKeywordsChange","minWords","setMinWords","maxWords","setMaxWords","intentFilter","handleIntentFilterChange","colorFilter","handleColorFilterChange","marginTop","marginLeft","value","placeholder","rows","width","marginRight","display","DataTable","getColorForIntent","length","headers","Object","keys","border","map","header","key","row","index","backgroundColor","Intent","App","setIncludeKeywords","setExcludeKeywords","setIntentFilter","setColorFilter","includeKeywordArray","split","k","trim","filter","excludeKeywordArray","intent","filteredData","matchesIncludeKeywords","some","keyword","values","val","String","toLowerCase","includes","matchesExcludeKeywords","matchesIntentFilter","matchesColorFilter","totalWordCount","reduce","count","parseInt","groupedData","acc","keyData","Filtered Data","Fragment","flex","keywordsStr","flexWrap","group","margin","onClick","downloadExcel","worksheet","json_to_sheet","book_new","book_append_sheet","forEach","groupSheet","date","Date","formattedDate","concat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1015c0aa.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport * as XLSX from 'xlsx'\n\nconst FileUpload = ({ setData }) => {\n  const [error, setError] = useState('')\n  const [fileName, setFileName] = useState('')\n\n  const handleFile = (event) => {\n    const file = event.target.files[0]\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        try {\n          const data = new Uint8Array(e.target.result)\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheet = workbook.Sheets[workbook.SheetNames[0]]\n          const jsonData = XLSX.utils.sheet_to_json(firstSheet)\n          setData(jsonData)\n          setError('')\n          setFileName(file.name)\n        } catch (err) {\n          setError('Failed to read file. Please make sure it is a valid Excel file.')\n          setData([])\n          setFileName('')\n        }\n      }\n      reader.readAsArrayBuffer(file)\n    } else {\n      setError('Please upload a valid Excel file.')\n      setData([])\n      setFileName('')\n    }\n  }\n\n  return (\n    <div>\n      <input type='file' onChange={handleFile} accept='.xlsx' />\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {fileName && <p>Uploaded file: {fileName}</p>}\n    </div>\n  )\n}\n\nexport default FileUpload\n","import React from 'react'\n\nconst SearchFilter = ({\n  includeKeywords,\n  handleIncludeKeywordsChange,\n  excludeKeywords,\n  handleExcludeKeywordsChange,\n  minWords,\n  setMinWords,\n  maxWords,\n  setMaxWords,\n  intentFilter,\n  handleIntentFilterChange,\n  colorFilter,\n  handleColorFilterChange,\n}) => {\n  return (\n    <div style={{ marginTop: '20px', marginLeft: '20px' }}>\n      <textarea\n        value={includeKeywords}\n        onChange={(e) => handleIncludeKeywordsChange(e.target.value)}\n        placeholder='Enter include keywords, one per line...'\n        rows='5'\n        style={{ width: '48%', marginRight: '2%' }}\n      />\n      <textarea\n        value={excludeKeywords}\n        onChange={(e) => handleExcludeKeywordsChange(e.target.value)}\n        placeholder='Enter exclude keywords, one per line...'\n        rows='5'\n        style={{ width: '48%' }}\n      />\n      <div style={{ display: 'flex', marginTop: '10px' }}>\n        <input type='number' value={minWords} onChange={(e) => setMinWords(e.target.value)} placeholder='Min Words' style={{ marginRight: '10px' }} />\n        <input type='number' value={maxWords} onChange={(e) => setMaxWords(e.target.value)} placeholder='Max Words' />\n      </div>\n      <div style={{ display: 'flex', marginTop: '10px' }}>\n        <input\n          type='text'\n          value={intentFilter}\n          onChange={(e) => handleIntentFilterChange(e.target.value)}\n          placeholder='Intent Filter'\n          style={{ width: '48%', marginRight: '2%' }}\n        />\n        <select value={colorFilter} onChange={(e) => handleColorFilterChange(e.target.value)} style={{ width: '48%' }}>\n          <option value=''>Select Color Filter</option>\n          <option value='pink'>Price (pink)</option>\n          <option value='blue'>Information (blue)</option>\n          <option value='red'>Review (red)</option>\n          <option value='yellow'>Product (yellow)</option>\n          <option value='gray'>Local (gray)</option>\n          <option value='orange'>Services (orange)</option>\n          <option value='white'>Topic (white)</option>\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchFilter\n","import React from 'react'\n\nconst DataTable = ({ data, getColorForIntent }) => {\n  if (!data.length) return <p>No data available</p>\n\n  const headers = Object.keys(data[0])\n\n  return (\n    <table border='1' style={{ width: '100%', marginTop: '20px' }}>\n      <thead>\n        <tr>\n          {headers.map((header) => (\n            <th key={header}>{header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row, index) => (\n          <tr key={index} style={{ backgroundColor: getColorForIntent(row.Intent) }}>\n            {headers.map((header) => (\n              <td key={header}>{row[header]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default DataTable\n","import React, { useState } from 'react'\nimport FileUpload from './FileUpload'\nimport SearchFilter from './SearchFilter'\nimport DataTable from './DataTable'\nimport * as XLSX from 'xlsx'\n\nconst App = () => {\n  const [data, setData] = useState([])\n  const [includeKeywords, setIncludeKeywords] = useState('')\n  const [excludeKeywords, setExcludeKeywords] = useState('')\n  const [minWords, setMinWords] = useState('')\n  const [maxWords, setMaxWords] = useState('')\n  const [intentFilter, setIntentFilter] = useState('')\n  const [colorFilter, setColorFilter] = useState('')\n\n  const handleIncludeKeywordsChange = (keywordsStr) => {\n    setIncludeKeywords(keywordsStr)\n  }\n\n  const handleExcludeKeywordsChange = (keywordsStr) => {\n    setExcludeKeywords(keywordsStr)\n  }\n\n  const handleIntentFilterChange = (intent) => {\n    setIntentFilter(intent)\n  }\n\n  const handleColorFilterChange = (color) => {\n    setColorFilter(color)\n  }\n\n  const includeKeywordArray = includeKeywords\n    .split('\\n')\n    .map((k) => k.trim())\n    .filter((k) => k)\n  const excludeKeywordArray = excludeKeywords\n    .split('\\n')\n    .map((k) => k.trim())\n    .filter((k) => k)\n\n  const getColorForIntent = (intent) => {\n    switch (intent) {\n      case 'i':\n        return 'blue' // information\n      case 're':\n        return 'red' // review\n      case 'pr':\n        return 'pink' // price\n      case 'sp':\n        return 'yellow' // product\n      case 'l':\n        return 'gray' // local\n      case 'dv':\n        return 'orange' // services\n      default:\n        return 'white' // topic\n    }\n  }\n\n  const filteredData = data.filter((row) => {\n    const matchesIncludeKeywords =\n      includeKeywordArray.length === 0 ||\n      includeKeywordArray.some((keyword) => Object.values(row).some((val) => String(val).toLowerCase().includes(keyword.toLowerCase())))\n\n    const matchesExcludeKeywords = excludeKeywordArray.some((keyword) =>\n      Object.values(row).some((val) => String(val).toLowerCase().includes(keyword.toLowerCase()))\n    )\n\n    const matchesIntentFilter = intentFilter === '' || (row.Intent && row.Intent.toLowerCase().includes(intentFilter.toLowerCase()))\n    const matchesColorFilter = colorFilter === '' || getColorForIntent(row.Intent) === colorFilter\n\n    if (!matchesIncludeKeywords || matchesExcludeKeywords || !matchesIntentFilter || !matchesColorFilter) {\n      return false\n    }\n\n    const totalWordCount = Object.values(row).reduce((count, val) => {\n      return count + String(val).trim().split(/\\s+/).length\n    }, 0)\n\n    const matchesWordCount =\n      (minWords === '' || totalWordCount >= parseInt(minWords, 10)) && (maxWords === '' || totalWordCount <= parseInt(maxWords, 10))\n\n    return matchesWordCount\n  })\n\n  const groupedData =\n    includeKeywordArray.length > 0\n      ? includeKeywordArray.reduce((acc, keyword) => {\n          const keyData = filteredData.filter((row) => Object.values(row).some((val) => String(val).toLowerCase().includes(keyword.toLowerCase())))\n          if (keyData.length > 0) {\n            acc[keyword] = keyData\n          }\n          return acc\n        }, {})\n      : { 'Filtered Data': filteredData }\n\n  const downloadExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'AllData')\n    Object.keys(groupedData).forEach((group) => {\n      const groupSheet = XLSX.utils.json_to_sheet(groupedData[group])\n      XLSX.utils.book_append_sheet(workbook, groupSheet, group)\n    })\n    const date = new Date()\n    const formattedDate = `${date.getFullYear()}-${\n      date.getMonth() + 1\n    }-${date.getDate()}_${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`\n    const fileName = `filtered_data_${formattedDate}.xlsx`\n    XLSX.writeFile(workbook, fileName)\n  }\n\n  const copyData = () => {\n    const headers = Object.keys(filteredData[0] || {}).join('\\t')\n    const rows = filteredData.map((row) => Object.values(row).join('\\t')).join('\\n')\n    return `${headers}\\n${rows}`\n  }\n\n  return (\n    <div style={{ marginTop: '20px', marginLeft: '20px' }}>\n      <h1>Excel Filter App</h1>\n      <FileUpload setData={setData} />\n      {data.length > 0 && (\n        <>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: '1', marginRight: '20px' }}>\n              <h2>All Data</h2>\n              <DataTable data={data} getColorForIntent={getColorForIntent} />\n            </div>\n            <div style={{ flex: '3' }}>\n              <SearchFilter\n                includeKeywords={includeKeywords}\n                handleIncludeKeywordsChange={handleIncludeKeywordsChange}\n                excludeKeywords={excludeKeywords}\n                handleExcludeKeywordsChange={handleExcludeKeywordsChange}\n                minWords={minWords}\n                setMinWords={setMinWords}\n                maxWords={maxWords}\n                setMaxWords={setMaxWords}\n                intentFilter={intentFilter}\n                handleIntentFilterChange={handleIntentFilterChange}\n                colorFilter={colorFilter}\n                handleColorFilterChange={handleColorFilterChange}\n              />\n              <div style={{ display: 'flex', flexWrap: 'wrap', marginTop: '20px' }}>\n                {Object.keys(groupedData).map((group, index) => (\n                  <div key={group} style={{ flex: '1 1 20%', margin: '10px' }}>\n                    <h2>{group}</h2>\n                    <DataTable data={groupedData[group]} getColorForIntent={getColorForIntent} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <button onClick={downloadExcel} style={{ marginTop: '20px' }}>\n            Download All Data\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}